sequenceDiagram
    Orchestrator->>+UrlManager: urlsToCrawlInStep(stepSize)
    UrlManager-->>-Orchestrator: URLs
    
    par 
        Orchestrator->>+Worker A: crawlChunk(chunkOfUrls)
        Worker A-->>-Orchestrator: Partial Result
    and
    Orchestrator->>+Worker B: crawlChunk(chunkOfUrls)
    Worker B-->>-Orchestrator: Partial Result
    end

    Orchestrator->>UrlManager: add(urlsFromResult)
    Orchestrator->>Repository: save(dataFromResult)
    
    Orchestrator->>UrlManager: markAsVisited(URLsVisitedInThisStep)


===========================================================================================

classDiagram

    CrawlResult o-- Failed
    CrawlResult o-- Crawled
    Crawled o-- UrlVisitRecord
    Crawled o-- Url
    Crawled o-- PageContent
    Failed o-- UrlVisitRecord

    UrlVisitRecord o-- Url

    PageContent o-- Url

    class Crawled{
        urlVisitRecord: UrlVisitRecord
        supportedUrlsOnPage: List[Url]
        pageContent: PageContent
    }

    class Failed{
        urlVisitRecord: UrlVisitRecord
        errorMsg: String
    }

    class PageContent{
        title: Option[String] 
        authors: List[String]
        introSection: Option[String] 
        articleText: Option[String]
        publishDate: Option[String] 
        lastUpdatedDate: Option[String]
        childArticles: List[Url]
    }

    class UrlVisitRecord{
        url: Url
        timestamp: Timestamp
    }

    class Url{
        address: String
    }

    class CrawlResult{
        crawled: List[Crawled]
        failed: List[Failed]

        addCrawled(Crawled): CrawlResult
        addFailed(Failed): CrawlResult
        ++(CrawlResult): CrawlResult
    }


===========================================================================================




classDiagram

    Crawler *-- CrawlerContext

    CrawlerContext o-- Logger
    CrawlerContext o-- Repository
    CrawlerContext o-- UrlManager

    CrawlerContext *-- PageVisitor
    UrlManager o-- Url

    class PageVisitor{
        fun: Url => Document
    }

    class Logger{
        <<interface>>
    } 

    class Repository{
        <<interface>>
    }

    class UrlManager{
        <<interface>>
    }

    class PageVisitor{
        <<interface>>
    }

    
    

===========================================================================================
